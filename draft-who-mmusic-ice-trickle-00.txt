


Network Working Group                                        E. Rescorla
Internet-Draft                                                RTFM, Inc.
Intended status: Standards Track                               J. Uberti
Expires: March 31, 2013                                           Google
                                                                 E. Ivov
                                                                   Jitsi
                                                      September 27, 2012


Trickle ICE: Incremental Provisioning of Candidates for the Interactive
               Connectivity Establishment (ICE) Protocol
                  draft-rescorla-mmusic-ice-trickle-00

Abstract

   This document describes an extension to the Interactive Connectivity
   Establishment (ICE) protocol that allows ICE agents to send and
   receive candidates incrementally rather than exchanging complete
   lists.  With incremental provisioning, ICE agents can begin
   connectivity checks while they are still gathering candidates and
   considerably shorten the time necessary for ICE processing to
   complete.

   The above mechanism is often referred to as "trickle ICE".

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 31, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal



Rescorla, et al.         Expires March 31, 2013                 [Page 1]

Internet-Draft                 Trickle ICE                September 2012


   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  4
   3.  Incompatibility with Standard ICE  . . . . . . . . . . . . . .  4
   4.  Detecting Support for Trickle ICE  . . . . . . . . . . . . . .  5
   5.  Sending the Initial Offer  . . . . . . . . . . . . . . . . . .  6
   6.  Receiving the Initial Offer  . . . . . . . . . . . . . . . . .  7
     6.1.  Sending an answer  . . . . . . . . . . . . . . . . . . . .  7
     6.2.  Forming check lists and beginning connectivity checks  . .  8
   7.  Receipt of the Initial Answer  . . . . . . . . . . . . . . . .  8
   8.  Performing Connectivity Checks . . . . . . . . . . . . . . . .  8
   9.  Sending Additional Local Candidates  . . . . . . . . . . . . .  8
   10. Receiving Additional Remote Candidates . . . . . . . . . . . .  9
   11. Processing Newly Received Candidates . . . . . . . . . . . . .  9
   12. Updating states  . . . . . . . . . . . . . . . . . . . . . . .  9
   13. Ending Candidate Trickling . . . . . . . . . . . . . . . . . .  9
   14. Ending ICE Processing with Trickle ICE . . . . . . . . . . . . 10
   15. Interaction with non-Trickle ICE implementations . . . . . . . 10
   16. Security Considerations  . . . . . . . . . . . . . . . . . . . 10
   17. Open Issues  . . . . . . . . . . . . . . . . . . . . . . . . . 10
   18. References . . . . . . . . . . . . . . . . . . . . . . . . . . 10
     18.1. Normative References . . . . . . . . . . . . . . . . . . . 10
     18.2. Informative References . . . . . . . . . . . . . . . . . . 11
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 12
















Rescorla, et al.         Expires March 31, 2013                 [Page 2]

Internet-Draft                 Trickle ICE                September 2012


1.  Introduction

   The Interactive Connectivity Establishment (ICE) protocol [RFC5245]
   describes mechanisms for gathering, candidates, prioritizing them,
   choosing default ones, exchanging them with the remote party, and
   pairing them and ordering them into check lists.  Once all of the
   above have been completed, and only then, the participating agents
   can begin a phase of connectivity checks and eventually select the
   pair of candidates that will be used in the following session.

   While the above sequence has the advantage of being relatively
   straightforward to implement, and debug once deployed, it may also
   prove to be rather lengthy.  Gathering candidates would often involve
   things like querying STUN [RFC5389] servers, discovering UPnP
   devices, and allocating relayed candidates at TURN [RFC5766] servers.
   All of these can be delayed for a noticeable amount of time and while
   they can be run in parallel, they still need to respect the pacing
   requirements from [RFC5245], which is likely to delay them even
   further.  Some or all of the above would then have to be completed by
   the remote agent.  Both agents would then need to perform
   connectivity checks and only then would they be ready to begin
   streaming media.

   All of the above could lead to particularly lengthy session
   establishment times and degraded user experience.

   The purpose of this document is to define an alternative mode of
   operation for ICE implementations, also known as "trickle ICE", where
   candidates can be exchanged incrementally.  This would allow ICE
   agents to exchange host candidates as soon as a session has been
   initiated.  Connectivity checks for a media stream would also start
   as soon as the first candidates for that stream have become
   available.

   Tickle ICE allows reducing session establishment times in cases where
   connectivity is confirmed for the first exchanged candidates (e.g.
   where the host candidates for one of the agents is directly reachable
   from those of the second agent).  Even when this is not the case,
   running candidate harvesting for both agents and connectivity checks
   all in parallel allows to considerably reduce ICE processing times.

   It is worth pointing out that before being introduced to the IETF,
   trickle ICE had already been been included in specifications such as
   XMPP Jingle [XEP-0176] and it has been deployed in use by various
   implementations.

   In addition to the basics of trickle ICE, this document also
   describes how, support for trickle ICE needs to be discovered, how



Rescorla, et al.         Expires March 31, 2013                 [Page 3]

Internet-Draft                 Trickle ICE                September 2012


   regular ICE processing needs to be modified when building and
   updating check lists, and how trickle ICE implementations should
   interoperate with agents that only implement [RFC5245] processing.

   This specification does not define usage of trickle ICE with any
   specific signalling or media description protocol, contrary to
   [RFC5245] which defined a usage for ICE wht SIP and SDP.


2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   This specification makes use of all terminology defined by the the
   protocol for Interactive Connectivity Establishment in [RFC5245].

   This specification makes use of all terminology defined by the the
   protocol for Interactive Connectivity Establishment in [RFC5245].

   The Interactive Connectivity Establishment protocol as defined in
   [RFC5245].


3.  Incompatibility with Standard ICE

   The ICE protocol was designed to be fairly flexible so that it would
   work in and a adapt to as many network environments as possible.  It
   is hence important to point out at least some of the reasons why,
   despite its flexibility, the specification in [RFC5245] would not
   support trickle-ICE.

   [RFC5245] describes the conditions required to update check lists and
   timer states while an ICE agent is in the Running state.  These
   conditions are verified upon transaction completion and one of them
   stipulates that:
      If there is not a pair in the valid list for each component of the
      media stream, the state of the check list is set to Failed.
   This could be a problem and cause ICE processing to fail prematurely
   in a number of scenarios.  Consider the following case:
   o  Alice and Bob are both located in different networks with Network
      Address Translation (NAT).  Alice and Bob themselves have
      different address but both networks use the same [RFC1918] block.
   o  Alice sends Bob the candidate 10.0.0.10 which also happens to
      correspond to an existing host on Bob's network.





Rescorla, et al.         Expires March 31, 2013                 [Page 4]

Internet-Draft                 Trickle ICE                September 2012


   o  Bob creates a check list consisting solely of 10.0.0.10 and starts
      checks.
   o  These checks reach the host at 10.0.0.10 in Bob's network, which
      responds with an ICMP "port unreachable" error and per [RFC5245]
      Bob marks the transaction as Failed.
   At this point the check list only contains Failed candidates and the
   valid list is empty.  This causes the media stream and potentially
   all ICE processing to Fail.

   A similar race condition would occur if the initial offer from Alice
   only contains candidates that can be determined as unreachable (per
   [I-D.keranen-mmusic-ice-address-selection]) from any of the
   candidates that Bob has gathered.  This would be the case if Bob's
   candidates only contain IPv4 addresses and the first candidate that
   he receives from Alice is an IPv6 one.

   [emcho: I am not sure we need the following since Bob's choice to
   start checks immediately is entirely an implemenation issue issue and
   not a protocol one ... this would however be an issue if Alice also
   supports trickle ICE and she sends hers server reflexive candidate in
   the original offer. ].

   Another potential problem could arise when a non-trickle ICE
   implementation sends an offer to a trickle one.  Consider the
   following case:
   o  Alice's client has a non-trickle ICE implementation
   o  Bob's client as support for trickle ICE.
   o  Alice and Bob are behind NATs with address-dependent filtering
      [RFC4787].
   o  Bob has two STUN servers but one of them is currently unreachable
   After Bob's agent receives Alice's offer it would immediately start
   connectivity checks.  It would also start gathering candidates, which
   would take long because of the unreachable STUN server.  By the time
   Bob's answer is ready and sent to Alice, Bob's connectivity checks
   may well have failed: until Alice gets Bob's answer, she won't be
   able to start connectivity checks and punch holes in her NAT.  The
   NAT would hence be filtering Bob's checks as originating from an
   unknown endpoint.


4.  Detecting Support for Trickle ICE

   In order to avoid interoperability problems such as those described
   in section Section 3, it is important that before generating an offer
   and sending its first candidates an agent SHOULD first verify whether
   its correspondent also supports trickle ICE.

   The exact mechanisms that would allow for such verifications are



Rescorla, et al.         Expires March 31, 2013                 [Page 5]

Internet-Draft                 Trickle ICE                September 2012


   outside the scope of this document and should be handled by the
   signalling protocol that is employing ICE.

   Examples of how some signalling protocols already handle service and
   capabilities discovery include:
   o  Service discovery [XEP-0030] and Entity capabilities [XEP-0115]
      for XMPP
   o  Indicating User Agent Capabilities [RFC3840] for SIP

   Usages of trickle ICE SHOULD make use of these mechanisms where they
   exist.

   Also, in some cases it would be possible for an application to just
   "know" that support would be present.  One example for this would be
   a WebRTC application that does not need to interoperate with
   applications from other web sites.  Such applications can just enable
   trickle ICE without performing any additional checks.

   In other cases yet, agents may choose to just send an offer that the
   remote party reject as invalid unless it supports trickling.  One
   such example would be an offer with no ICE candidates and an invalid
   default address (e.g. 0.0.0.0).

   Usages of trickle ICE MUST define a way for offers or answers
   transporting the initial list of ICE candidates to indicate support
   for trickling.  Note that an offer or an answer may indicate lack of
   support for trickle ICE even if other mechanisms have allowed to
   confirm that the remote agent does support it.  In such cases agents
   should act as if trickle ICE is not supported for this particular
   session.


5.  Sending the Initial Offer

   An agent starts gathering candidates as soon as it has an indication
   that communication is imminent (e.g. a user interface cue or an
   explicit request to initiate a session).  However, contrary to
   vanilla ICE, implementations of trickle ICE do not need to gather
   candidates in a blocking manner, strictly preceding the generation
   and transmission of their initial offer.

   Trickle ICE agents MAY include any set of candidates in their initial
   offer.  This includes the possibility of generating an offer with no
   candidates, or one that contains all the candidates that the agent is
   planning on using in the following session.

   For optimal performance, it is RECOMMENDED that an initial offer
   contains host candidates only.  This would allow both agents to start



Rescorla, et al.         Expires March 31, 2013                 [Page 6]

Internet-Draft                 Trickle ICE                September 2012


   gathering server reflexive, relayed and other non-host candidates
   simultaneously, and it would also enable them to begin connectivity
   checks.

   If the privacy implications of revealing host addresses are a
   concern, agents MAY generate an initial offer that contains no
   candidates and then only trickle candidates that do not reveal host
   addresses (e.g. relayed candidates).

   Prior to actually sending an offer agents SHOULD verify if the remote
   party supports trickle ICE.  If absence if such support is confirmed
   agents SHOULD fall back to using vanilla ICE or abandon the entire
   session.

   All trickle ICE offers MUST indicate support of this specification.
   The exact means of providing this indication is left to the usages
   that define how signalling protocols employ trickle ICE.

   [TODO: prioritizing and calculating foundations and such should work
   the same way they did with 5245]


6.  Receiving the Initial Offer

   When an agent receives an initial ICE-enabled offer, it will check if
   the offerer supports trickle ICE as explained in Section 4.  If this
   is not the case, the agent MUST process this offer according to the
   [RFC5245] procedures.

   If, the offer does indicate support for trickle ICE, the agent will
   determine its role, start gathering and prioritizing candidates and,
   while doing so it will also send an answer, start forming checklists
   and begin connectivity checks.

6.1.  Sending an answer

   The agent can create and send an answer at any point while gathering
   candidates.  Just as with offers, answers can contain no or all
   candidates an agent is planning on using.  Again, as with offers, it
   is RECOMMENDED that answers contain host candidates so that the
   remote party can also start forming checklists and performing
   connectivity checks.

   The answer MUST indicate support for trickle ICE as specified by
   usage specifications.






Rescorla, et al.         Expires March 31, 2013                 [Page 7]

Internet-Draft                 Trickle ICE                September 2012


6.2.  Forming check lists and beginning connectivity checks

   After sending an answer, and as soon as they have gathered any
   candidates, agents will begin forming candidate pairs, computing
   their priorities and creating check lists according to the vanilla
   ICE procedures described in [RFC5245].

   Trickle ICE agents will then also attempt to unfreeze the check list
   for the first media stream (i.e. the first media stream that was
   reported to the ICE implementation from the using application).  If
   this checklist is still empty however, agents will continue examining
   media streams in the order they were reported and will unfreeze the
   first non-empty checklist.

   Respecting the order in which lists have been reported to an ICE
   implementation, or in other words, the order in which streams had
   been described by the signalling protocol (e.g.  SDP) is necessary so
   that checks for the same media stream would be performed
   simultaneously by both agents.


7.  Receipt of the Initial Answer

   When receiving an answer, agents will follow vanilla ICE procedures
   for determine their role and they would then form check lists as
   described in Section 6.2.


8.  Performing Connectivity Checks

   Performing connectivity checks (how do we change the rules for state
   updates).  Contrary to [RFC5245] where connectivity checks only start
   once all check lists have been created, a trickle ICE agent would
   have to start earlier. ekr: (a) as soon as any check list is non-
   empty, start that media stream. juberti: seems like the best choice
   [TODO: expand] ekr: Say I finish checks on one stream
   successfully.Ordinarily, I would start to unfreeze other check lists,
   but what if those are empty?  How do they get unfrozen when
   candidates come in? juberti: same condition as when we start: we wait
   and we unfreeze any check list that gets a candidate. martin: could
   fail if we start conn checking a server reflexive candidate for a
   component where we haven't yet sent hours.  [TODO: discuss, resolve
   and expand]


9.  Sending Additional Local Candidates

   After an initial offer has been sent or received, agents will most



Rescorla, et al.         Expires March 31, 2013                 [Page 8]

Internet-Draft                 Trickle ICE                September 2012


   likely continue discovering new local candidates as responses from
   STUN/TURN servers, and other candidate sources arrive.  Whenever such
   new candidates are received agents can handle them in one of the
   following ways:

   [TODO: prioritizing and calculating foundations and such should work
   the same way they did with 5245] [TODO: when do we stop - a) when we
   have a nominated candidate b) when all harvesters are completed ]
   [TODO: Explain rules about how to trickle.  Are there any?  Can we
   just send any candidate at any point?]


10.  Receiving Additional Remote Candidates

   [TODO: use 7.2.1.3 i 7.2.1.4. for inspiration] [TODO: depending on
   our state we either just remember the new candidate or we pair it
   with every possible agent (including peer reflexive), we prioritize
   it and add it to the check lists.  Potentially, we could ]


11.  Processing Newly Received Candidates

   explain state updates and when we unfreeze new lists/pairs explain
   checklist updates upon reception of new candidates. we only care
   about pairs that end up being higher priority than the valid ones.
   juberti: If we have a valid pair, and we get a candidate that results
   in higher priority pairs, we need to test those pairs.  Any lower
   priority pairs can be ignored though, which may mean the whole
   candidate can be ignored. (ignoring hot backups) [TODO: expand]


12.  Updating states

   [TODO: not sure if we need this yet, may very well be that the
   algorithm of updating states when a transaction ends will be covered
   by another section]


13.  Ending Candidate Trickling

   At any point while ICE is running any of the participating agents may
   reach a point where it would not be able obtain any new candidates.
   In such cases agents SHOULD send an indication to the remote party,
   notifying them that the candidate trickling has ended.  [TODO: should
   this be sent by the controlling agent only?]  [TODO: expand]






Rescorla, et al.         Expires March 31, 2013                 [Page 9]

Internet-Draft                 Trickle ICE                September 2012


14.  Ending ICE Processing with Trickle ICE

   in case checks succeed. in case checks haven't succeded but we are
   still waiting for candidate harvesters in case chacks fail and we
   have received the end-of-candidates message or a timer has expired
   since the last received candidate [TODO: expand]


15.  Interaction with non-Trickle ICE implementations

   Trickle ICE implementations MUST behave as non-trickle and follow
   [RFC5245] unless they can confirm that the remote party supports this
   specification.


16.  Security Considerations

   [TODO]


17.  Open Issues

   At the time of writing of this document the authors have no clear
   view on how and if the following list of issues should be address
   here:
   1.  Should this document cover use of trickle ICE with SDP as
       [RFC5245] does?
   2.  Should this document cover use of trickle ICE with SIP as
       [RFC5245] does?
   3.  This document currently treats trickle ICE as an extra mode of
       operation for ICE that is incompatible with RFC 5245 and should
       only be used when support is confirmed.  Is this the right way?
   4.  If we do decide to handle SIP here: Using trickle ICE with SIP
       adds additional constraints.  RFC3261 disallows reINVITE-s until
       the INVITE transaction completes which means that candidate
       updates need to use another mechanism.  Using UPDATE requests
       [RFC3311] could be one option.  Requiring a hasty completion of
       the initial transaction could be another and there are probably
       others.


18.  References

18.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.




Rescorla, et al.         Expires March 31, 2013                [Page 10]

Internet-Draft                 Trickle ICE                September 2012


   [RFC5245]  Rosenberg, J., "Interactive Connectivity Establishment
              (ICE): A Protocol for Network Address Translator (NAT)
              Traversal for Offer/Answer Protocols", RFC 5245,
              April 2010.

18.2.  Informative References

   [I-D.keranen-mmusic-ice-address-selection]
              Keranen, A. and J. Arkko, "Update on Candidate Address
              Selection for Interactive Connectivity Establishment
              (ICE)", draft-keranen-mmusic-ice-address-selection-01
              (work in progress), July 2012.

   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg, D., Groot, G., and
              E. Lear, "Address Allocation for Private Internets",
              BCP 5, RFC 1918, February 1996.

   [RFC3840]  Rosenberg, J., Schulzrinne, H., and P. Kyzivat,
              "Indicating User Agent Capabilities in the Session
              Initiation Protocol (SIP)", RFC 3840, August 2004.

   [RFC4787]  Audet, F. and C. Jennings, "Network Address Translation
              (NAT) Behavioral Requirements for Unicast UDP", BCP 127,
              RFC 4787, January 2007.

   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,
              "Session Traversal Utilities for NAT (STUN)", RFC 5389,
              October 2008.

   [RFC5766]  Mahy, R., Matthews, P., and J. Rosenberg, "Traversal Using
              Relays around NAT (TURN): Relay Extensions to Session
              Traversal Utilities for NAT (STUN)", RFC 5766, April 2010.

   [XEP-0030]
              Hildebrand, J., Millard, P., Eatmon, R., and P. Saint-
              Andre, "XEP-0030: Service Discovery", XEP XEP-0030,
              June 2008.

   [XEP-0115]
              Hildebrand, J., Saint-Andre, P., Troncon, R., and J.
              Konieczny, "XEP-0115: Entity Capabilities", XEP XEP-0115,
              February 2008.

   [XEP-0176]
              Beda, J., Ludwig, S., Saint-Andre, P., Hildebrand, J.,
              Egan, S., and R. McQueen, "XEP-0176: Jingle ICE-UDP
              Transport Method", XEP XEP-0176, June 2009.




Rescorla, et al.         Expires March 31, 2013                [Page 11]

Internet-Draft                 Trickle ICE                September 2012


Authors' Addresses

   Eric Rescorla
   RTFM, Inc.
   2064 Edgewood Drive
   Palo Alto, CA  94303
   USA

   Phone: +1 650 678 2350
   Email: ekr@rtfm.com


   Justin Uberti
   Google
   5 Cambridge Center
   Cambridge, MA  02142
   USA

   Email: justin@uberti.name


   Emil Ivov
   Jitsi
   Strasbourg  67000
   France

   Phone: +33 6 72 81 15 55
   Email: emcho@jitsi.org























Rescorla, et al.         Expires March 31, 2013                [Page 12]

